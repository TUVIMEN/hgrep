.TH HGREP 1 hgrep\-VERSION

.SH NAME
hgrep - simple html searching tool

.SH SYNOPSIS
.B hgrep
.RI [ OPTION .\|.\|.]\&
.I PATTERNS
.RI [ FILE .\|.\|.]\&
.br

.SH DESCRIPTION
.B hgrep
searches for
.I PATTERNS
in each
.IR FILE .
Typically 
.I PATTERNS
should be quoted when hgrep is used in shell command.
.PP
When
.I FILE
isn't specified,
.I FILE
will become standard input.

.SH OPTIONS
.SS "Generic Program Information"
.TP
.B \-h
Output a usage message and exit.
.TP
.BR \-v
Output the version number of
.B hgrep
and exit.

.SS "Pattern Syntax"
.TP
.BR \-E
Use extended regular expressions.
.TP
.BR \-F
Enter fast and low memory consumption mode, in which use of multiple output patterns is forbidden.

.SS "Matching Control"
.TP
.BI \-f " FILE"
Obtain pattern from
.IR FILE.
The empty file contains zero patterns, and therefore matches nothing.
.TP
.BR \-i
Ignore case distinctions in patterns and input data,
so that characters that differ only in case
match each other.

.SS "General Output Control"
.TP
.BI \-o " FILE"
Change output to a
.IR FILE
instead of stdout.

.SS "File and Directory Selection"
.TP
.BR \-r
Read all files under each directory, recursively.
.TP
.BR \-H
Follow symbolic links.
.TP
.BR \-R
Read all files under each directory, recursively.
Follow all symbolic links, unlike
.BR \-r .
.SS "Other Options"
.TP
.B \-l
set
.IR PATTERN
to '| "%t%I - %c/%l/%s/%p\\n"'.

.SH HGREP PATTERN
.SS PATTERN
A simple regex expression, can be quoted, if not some characters or constructs may be restricted, and ignored by '\\' character before each of them.
.nf
\&
.in +4m
.B 'REGEX'
\fB"REGEX"\fR
.B REGEX
.in
\&
.SS ATTRIBUTE_NAME
Attribute's name \fBPATTERN\fR. Starting by '+' or '-' will reliably assure that it will be treated as attribute, but in most cases can be omitted. '-' signifies its negation. It can be followed by \fB[RANGE]\fR which matches attribute's position in tag.

Attribute name can be shortened to '.' or '#' (see below). If not using glibc you should use that with \fB-E\fR flag.
.nf
\&
.in +4m
\fBPATTERN\fR          - existing attribute
\fB+PATTERN\fR         - existing attribute
\fB-PATTERN\fR         - non existing attribute
\fB.PATTERN\fR         - same as class="^\\(.*[ \\t\\n\\r]\\+\\)*PATTERN\\([ \\t\\n\\r]\\+.*\\)*$"
\fB#PATTERN\fR         - same as id="^\\(.*[ \\t\\n\\r]\\+\\)*PATTERN\\([ \\t\\n\\r]\\+.*\\)*$"
\fB[RANGE]PATTERN\fR   - existing attribute at position determined by RANGE
\fB-[RANGE]PATTERN\fR
\fB+.PATTERN\fR
\fB-[RANGE]#PATTERN\fR
.in
\&
.SS ATTRIBUTE
Consists of \fBATTRIBUTE_NAME\fR followed by '=' and \fBPATTERN\fR of attribute's value. When given only \fBATTRIBUTE_NAME\fR  without specifying its value equals of ignoring its value (which is faster than \fBATTRIBUTE_NAME=.*\fR).

.nf
\&
.in +4m
\fBATTRIBUTE\fR - ignore value of attribute
\fBATTRIBUTE_NAME=PATTERN\fR
.in
\&
.SS RANGE
Is always embedded in square brackets. Consists of groups of three numbers separated by ':', that can be practically endlessly separated by ','. Empty values will be complementes. Putting '-' before two first values (even if they are not specified) makes subtracted from the maximal value. 

Specifying only one value equals to matching only to that value.

Specifying two values equals to matching range between and of them.

Specifying three values additionally matches only values of which modulo of third value is equal to 0.

.nf
\&
.in +4m
\fB[x1,x2,x3,x4]\fR - match to one of the values
\fB[x1:y1,x2:y2]\fR - match to one of the ranges
\fB[-]\fR           - match to last value
\fB[-x]\fR          - match to x'th value from the end
\fB[:-y]\fR         - match to range from 0 to y'th value from end
\fB[::z]\fR         - match to values from which modulo of z is equal to 0
\fB[x:y:z]\fR       - match to range from x to y from which modulo of z is equal to 0
.in
\&
.SS HOOK
Always begins with '@' followed by name of function, optionally ended with argument which can be a \fBRANGE\fR or \fBTEXT\fR in '"' or '\\'' quotes.

.nf
\&
.in +4m
\fB@NAME\fR
\fB@NAME"TEXT"\fR
\fB@NAME'TEXT'\fR
\fB@NAME[RANGE]\fR
.in
\&

.SS TAG
At the begining each \fBTAG\fR must contain \fBPATTERN\fR of html tag and that can be followed by a number of \fBATTRIBUTE\fRs and \fBHOOK\fRs.

Matching will be inverted if \fBTAG\fR begins with '!'.

.nf
\&
.in +4m
\fBPATTERN\fR
\fB!PATTERN\fR
\fBPATTERN ATTRIBUTE... HOOK...\fR
.in
\&

.SS TAG_FORMAT
It has to be specified in '"' or '\\'' quotes.

If format is not specified it will be set to "%t\\n".

Prints output according to \fBFORMAT\fR interpreting '\e' escapes and `%' directives. The escapes and directives are:
.RS
.IP \ea
Alarm bell.
.IP \eb
Backspace.
.IP \ef
Form feed.
.IP \en
Newline.
.IP \er
Carriage return.
.IP \et
Horizontal tab.
.IP \ev
Vertical tab.
.IP \e0
ASCII NUL.
.IP \e\e
A literal backslash (`\e').
.IP %%
A literal percent sign.
.IP %t
Whole tag.
.IP %n
Tag's name.
.IP %i
Tag's insides.
.IP %I
Tag's insides without white space characters at the begining and end.
.IP %l
Tag's level.
.IP %p
Tag's position in current file.
.IP %s
Tag's size.
.IP %c
Tag's children count.
.IP %A
All of the tag's attributes.
.IP %a
Values of tag's attributes separated with '"'.
.IP %\fIk\fPa
Value of tag's attribute, where \fIk\fP is its position counted from zero.
.IP %(\fIk\fP)a
Value of tag's attribute, where \fIk\fP is its name.

.SS FUNCTION
Begins with name followed by arguments separated by whitespaces.

\fBFUNCTION\fR can have up to 4 arguments that are clearly defined in [] brackets or in "",'' quotes.

.nf
\&
.in +4m
\fBNAME\fR - function with no arguments
\fBNAME [list] "text1" "text2"\fR - function with first argument as a list, and second and third as text
.in
\&


.SS FORMAT
Consists of \fBFUNCTION\fRs separated by whitespace. Output of the tag is passed to \fBFUNCTION\fR, and its output is passed to the next until the last one which will print it.

If specified after '|' \fBFORMAT\fR will be executed separately for each matched tag.

If after '/' \fBFORMAT\fR will be executed for the whole output.

.nf
\&
.in +4m
\fBFUNCTION FUNCTION...\fR
.in
\&

.SS NODE
Consists of \fBTAG\fRs and \fBEXPRESSION\fRs separated by ';' which makes them pass result from previous node to the next.

Output \fBFORMAT\fR can be specified after '|' and '/' characters, everything after it will be taken as \fBFORMAT\fR.

.nf
\&
.in +4m
\fBTAG1; TAG2; NODE\fR - matches result of TAG1 by TAG2 and by NODE
\fBNODE1; NODE2  | TAG_FORMAT FORMAT1 / FORMAT2\fR - prints results of NODE2 with TAG_FORMAT which is then processed separately by FORMAT1, and then processed as a whole by FORMAT2
.in
\&

.SS EXPRESSION
Consists of \fBNODE\fRs separated by ',' and grouped in '{' '}' brackets (which accumulate their output and increases their level).
.nf
\&
.in +4m
\fBNODE1, NODE2\fR - two expressions
\fBEXPRESSION1; { EXPRESSION2; {EXPRESSION3, EXPRESSION4}, EXPRESSION5}; EXPRESSION6\fR
.in
\&

.SH HGREP PATTERN HOOKS
.BR m ",  " match_insides " " \fI"PATTERN"\fR
Get tags with insides that match
.IR PATTERN .
.TP
.BR M ",  " rev_match_insides " " \fI"PATTERN"\fR
Get tags with insides that does not match
.IR PATTERN .
.TP
.BR a ",  " attributes " " \fI[RANGE]\fR
Get tags with attributes that are within the
.IR RANGE .
.TP
.BR l ",  " level " " \fI[RANGE]\fR
Get tags that are on level within the
.IR RANGE .
.TP
.BR s ",  " size " " \fI[RANGE]\fR
Get tags with size of insides that is within the
.IR RANGE .
.TP
.BR c ",  " child_count " " \fI[RANGE]\fR
Get tags with number of children that is within the
.IR RANGE .

.SH HGREP FUNCTIONS
.B line \fI[SELECTED]\fR \fI"DELIM"\fR
.IP
Return selected lines.

Lines are separated by
.IR DELIM
(by default '\\n').
.TP

.B trim \fI"DELIM"\fR
.IP
Trim whitespaces at the beginning and end of the whole input.

Input can be split by
.IR DELIM
and trimmed separatedly.
.TP

.B sort \fI"FLAGS"\fR \fI"DELIM"\fR
.IP
Sort input delimited by \fIDELIM\fR (by default '\\n').

Flags:
    r - reverse the results of comparison
    u - omit repeated lines
.TP

.B uniq \fI"DELIM"\fR
.IP
Filter out repeating lines from input delimited by \fIDELIM\fR (by default '\\n').
.TP

.B tr \fI"STR1"\fR \fI"STR2"\fR \fI"FLAGS"\fR
.IP
Translate characters in
.IR STR1
to
.IR STR2 .
If \fISTR2\fR is not specified characters in \fISTR1\fR will be deleted.

special STR syntax:
    \fBCHAR1-CHAR2\fR - all characters from CHAR1 to CHAR2 in descending order
    \fB[CHAR*REPEAT]\fR - REPEAT copies of CHAR
    \fB[:space:]\fR - support for common character types, written in lower case

Flags:
    s - replace repeating sequences of characters with only one
    c - use the complement of \fISTR1\fR
.TP

.B cut \fI[SELECTED]\fR \fI"DELIMS"\fR \fI"FLAGS"\fR \fI"DELIM"\fR
.IP
Return selected parts from input delimited by \fIDELIM\fR (by default '\\n').

\fIDELIMS\fR specifies delimiters for fields and selects fields, if none are specified selection is based on bytes.

\fIDELIMS\fR have the same syntax as \fBtr\fR \fISTR\fR.

Flags:
    s - do not return lines with no delimiters
    c - complement \fILIST\fR
    z - sets \fIDELIM\fR to '\\0'
.TP

.B sed \fI"SCRIPT"\fR \fI"FLAGS"\fR \fI"DELIM"\fR
.IP
Implementation of
.BR sed (1).

Lines are delimited by \fIDELIM\fR (by default '\\n').

Flags:
    n - suppress automatic printing of pattern space
    z - set \fIDELIM\fR to '\\0'
    E - use extended regexp

Deviations from standard:
    \fBi\fR \fBc\fR \fBa\fR commands do nothing even though they take arguments
    \fBl\fR \fBr\fR \fBR\fR \fBQ\fR \fBw\fR \fBW\fR are not implemented
.TP

.SH EXAMPLES
Get tags 'a' with attribute 'href' at position 0 of value ending with '.org', from result of matching tags 'div' with attribute 'id', and without attribute 'class', from file 'index.html'.
.nf
\&
.in +4m
.B $ hgrep 'div +id \-class; a +[0]href=".*\\\\.org"' index.html
.in
\&
Get tags which does not have any tags inside them from file 'index.html'.
.nf
\&
.in +4m
.B $ hgrep '.* @M"<"' index.html
.in
\&
Get empty tags from file 'index.html'.
.nf
\&
.in +4m
.B $ hgrep '.* @s[0]' index.html
.in
\&
Get hyperlinks from level greater or equal to 6 from file 'index.html'.
.nf
\&
.in +4m
.B $ hgrep 'a +href @l[6:] | "%(href)a\\\\n"' index.html
.in
\&
Get all urls from 'a' and 'img' tags
.nf
\&
.in +4m
.B $ hgrep 'img +src | "%(src)a\\\\n", a +href | "%(href)a\\\\n"'
.in
\&

.SH AUTHOR
Dominik Stanisław Suchora <suchora.dominik7@gmail.com>
