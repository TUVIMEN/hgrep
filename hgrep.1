.TH HGREP 1 hgrep\-VERSION

.SH NAME
hgrep - simple html searching tool

.SH SYNOPSIS
.B hgrep
.RI [ OPTION .\|.\|.]\&
.I PATTERNS
.RI [ FILE .\|.\|.]\&
.br

.SH DESCRIPTION
.B hgrep
searches for
.I PATTERNS
in each
.IR FILE .
Typically 
.I PATTERNS
should be quoted when hgrep is used in shell command.
.PP
When
.I FILE
isn't specified,
.I FILE
will become standard input.

.SH OPTIONS
.SS "Generic Program Information"
.TP
.B \-h
Output a usage message and exit.
.TP
.BR \-V
Output the version number of
.B hgrep
and exit.
.SS "Pattern Syntax"
.TP
.BR \-E
Use extended regular expressions.
.SS "Matching Control"
.TP
.BI \-f " FILE"
Obtain pattern from
.IR FILE.
The empty file contains zero patterns, and therefore matches nothing.
.TP
.BR \-i
Ignore case distinctions in patterns and input data,
so that characters that differ only in case
match each other.
.TP
.BR \-v
Invert the sense of matching, to select non-matching lines.
.SS "General Output Control"
.TP
.BI \-o " FILE"
Change output to a
.IR FILE
instead of stdout.
.TP
.BI \-printf " FORMAT"
Print output according to
.IR FORMAT ,
interpreting '\e' escapes and `%' directives.  Field widths and precisions can be specified as with the
.BR printf (3)
C  function. The escapes and directives are:
.RS
.IP \ea
Alarm bell.
.IP \eb
Backspace.
.IP \ef
Form feed.
.IP \en
Newline.
.IP \er
Carriage return.
.IP \et
Horizontal tab.
.IP \ev
Vertical tab.
.IP \e0
ASCII NUL.
.IP \e\e
A literal backslash (`\e').
.IP %%
A literal percent sign.
.IP %A
Whole tag.
.IP %t
Tag's name.
.IP %i
Tag's insides.
.IP %l
Tag's level.
.IP %a
Values of tag's attributes separated with '"'
.IP %\fIk\fPa
Value of tag's attribute, where \fIk\fP is its position counted from zero.
.IP %(\fIk\fP)a
Value of tag's attribute, where \fIk\fP is its name.

.SS "File and Directory Selection"
.TP
.BR \-r
Read all files under each directory, recursively.
.TP
.BR \-H
Follow symbolic links.
.TP
.BR \-R
Read all files under each directory, recursively.
Follow all symbolic links, unlike
.BR \-r .
.SS "Other Options"
.TP
.B \-l
List structure of
.IR FILE .

.SH PATTERNS
Each pattern should be separated by semicolon. Tags and attributes are separated by whitespace characters. Pattern will be matched on results of the matching of previous pattern.
.SS TAG
At the begining each pattern should contain regex of html tag. If the first character is '!' then matching will be inverted.
.SS ATTRIBUTES
Before each attribute should be either '+' or '-', where '-' means not-matching of such attribute and '+' matching. As next is regex of attribute. To specify its value it should be followed by '=' and double quote in which should be regex of value. Leaving attribute without specifying the value of it means that maching of its value will be skipped.
.SS "ADDITIONAL OPTIONS"
The syntax of additional options is '/[ATTRIBUTE COUNT][LEVEL][INSIDES SIZE]/INSIDES REGEX/' and they should be placed before semicolon. Delimiter can be '/', '#', ',', but it needs to be consistent. If before second delimiter '!' character is met, then its matching will be inverted.
.PP
To specify additional options for attributes before its regex should be pair of square brackets specifying its position (starting from zero).
.SS "SQUARE BRACKETS"
Specifying one value in them means that matching value needs to be the same as in the brackets.
.PP
Character \'$' is aliased to the last value.
.PP
Specifying two values separated by '-' means range for matching value. Leaving  the values empty means that value will become zero or the last depending on the order.

.SH EXAMPLES
Get tags 'a' with attribute 'href' at position 0 of value ending with '.org' from result of matching tags 'div' with attribute 'id' and without attribute 'class' from file 'index.html'.
.nf
\&
.in +4m
.B $ hgrep 'div +id \-class; a +[0]href=".*\\\\.org"' index.html
.in
\&
Get tags which does not have any tags inside them from file 'index.html'.
.nf
\&
.in +4m
.B $ hgrep '.* /!/</' index.html
.in
\&
Get empty tags from file 'index.html'.
.nf
\&
.in +4m
.B $ hgrep '.* /[\-][\-][0]' index.html
.in
\&
Get hyperlinks from level greater or equal to 6 from file 'index.html'.
.nf
\&
.in +4m
.B $ hgrep 'a +href /[\-][6\-]' \-printf '%(href)a\\\\n' index.html
.in
\&

.SH "EXIT STATUS"
On success hgrep returns 0, on error 1.

.SH AUTHOR
TUVIMEN <suchora.dominik7@gmail.com>
